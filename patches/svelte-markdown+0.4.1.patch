diff --git a/node_modules/svelte-markdown/src/SvelteMarkdown.svelte b/node_modules/svelte-markdown/src/SvelteMarkdown.svelte
index 845f690..4b8d4b6 100644
--- a/node_modules/svelte-markdown/src/SvelteMarkdown.svelte
+++ b/node_modules/svelte-markdown/src/SvelteMarkdown.svelte
@@ -1,44 +1,45 @@
 <script>
-  import { setContext, createEventDispatcher, onMount } from 'svelte'
-  import Parser from './Parser.svelte'
-  import { Lexer, Slugger, defaultOptions, defaultRenderers } from './markdown-parser'
-  import { key } from './context'
-
-  export let source = []
-  export let renderers = {}
-  export let options = {}
-  export let isInline = false
-
-  const dispatch = createEventDispatcher();
-
-  let tokens;
-  let lexer;
-  let mounted;
-
-  $: preprocessed = Array.isArray(source)
-  $: slugger = source ? new Slugger : undefined
-  $: combinedOptions = { ...defaultOptions, ...options }
-  $: if (preprocessed) {
-    tokens = source
-  } else {
-    lexer = new Lexer(combinedOptions)
-
-    tokens = isInline ? lexer.inlineTokens(source) : lexer.lex(source)
-
-    dispatch('parsed', { tokens })
-  }
-
-  $: combinedRenderers = { ...defaultRenderers, ...renderers }
-
-  setContext(key, {
-    slug: (val) => slugger ? slugger.slug(val) : '',
-    getOptions: () => combinedOptions
-  })
-  $: mounted && !preprocessed && dispatch('parsed', { tokens })
-
-  onMount(() => {
-    mounted = true
-  });
+	import { setContext, createEventDispatcher, onMount } from "svelte";
+	import Parser from "./Parser.svelte";
+	import { Lexer, defaultOptions, defaultRenderers } from "./markdown-parser";
+	import { key } from "./context";
+	import Slugger from "github-slugger";
+
+	export let source = [];
+	export let renderers = {};
+	export let options = {};
+	export let isInline = false;
+
+	const dispatch = createEventDispatcher();
+
+	let tokens;
+	let lexer;
+	let mounted;
+
+	$: preprocessed = Array.isArray(source);
+	$: slugger = source ? new Slugger() : undefined;
+	$: combinedOptions = { ...defaultOptions, ...options };
+	$: if (preprocessed) {
+		tokens = source;
+	} else {
+		lexer = new Lexer(combinedOptions);
+
+		tokens = isInline ? lexer.inlineTokens(source) : lexer.lex(source);
+
+		dispatch("parsed", { tokens });
+	}
+
+	$: combinedRenderers = { ...defaultRenderers, ...renderers };
+
+	setContext(key, {
+		slug: (val) => (slugger ? slugger.slug(val) : ""),
+		getOptions: () => combinedOptions,
+	});
+	$: mounted && !preprocessed && dispatch("parsed", { tokens });
+
+	onMount(() => {
+		mounted = true;
+	});
 </script>
 
 <Parser {tokens} renderers={combinedRenderers} />
diff --git a/node_modules/svelte-markdown/src/markdown-parser.js b/node_modules/svelte-markdown/src/markdown-parser.js
index ea12aed..94dbcea 100644
--- a/node_modules/svelte-markdown/src/markdown-parser.js
+++ b/node_modules/svelte-markdown/src/markdown-parser.js
@@ -1,4 +1,4 @@
-export { Lexer, Slugger } from 'marked'
+export { Lexer } from 'marked'
 
 import {
   Heading,
